module.exports = function (grunt) {
    var path = require('path');
    
    var file = require('./lib/file.js');
    
    var scripts = path.resolve(__dirname, 'lib/script');
    
    grunt.registerTask('simple-oop', function () {
        var value = grunt.config.get('simple-oop');
        
        var src  = path.resolve('.', value.src),
            dest = path.resolve('.', value.dest);
        
        var srcFiles = getSrcFiles(src, value.global);
        
        concat(dest, srcFiles);
        
        if (value.hint)  { hint(dest);       }
        if (value.watch) { watch(value.src); }
    });
    
    function getSrcFiles(source, global) {
        var files = [path.join(scripts, 'init.js'),
                     path.join(scripts, 'dependency.js')];
        
        files = files.concat(file.getFiles(grunt, source));
        
        if (global) {
            var globalFile = path.join(scripts, 'global.js');
            
            grunt.file.write(globalFile, 'this.' + global + ' = ' + 'CLASS;\n');
            
            files.push(globalFile);
        }
        
        files.push(path.join(scripts, 'final.js'));
        
        return files;
    }
    
    function concat($dest, files) {    
        if (!grunt.task.exists('concat')) {
            grunt.loadNpmTasks('grunt-contrib-concat');
        }
        
        grunt.config('concat.simple-oop', {
            src:  files,
            dest: $dest
        });
        
        grunt.task.run('concat:simple-oop');
    }
    
    function watch(source) {
        if (!grunt.task.exists('watch')) {
            grunt.loadNpmTasks('grunt-contrib-watch');
        }
        
        var depth = file.getDepth();
        
        var glob = '';
        
        for (var i = 0; i < depth; i++) {
            glob += '**/';  
        }
        
        glob += '*.js';
        
        grunt.config('watch.simple-oop', {
            files: path.join(source, glob),
            tasks: ['simple-oop'],
            options: { 
                interval: 5007 
            }
        });
        
        grunt.task.run('watch:simple-oop');
    }
    
    function hint($dest) {
        if (!grunt.task.exists('jshint')) {
            grunt.loadNpmTasks('grunt-contrib-jshint');
        }
        
        grunt.config('jshint.simple-oop', {
            options: {
                sub:     true,
                boss:    true,
                curly:   true,
                immed:   true,
                force:   true,
                noarg:   true,
                undef:   true,
                devel:   true,
                newcap:  true,
                eqnull:  true,
                browser: true,
                latedef: true
            },
            files: {
                src: [$dest]
            }
        });
        
        grunt.task.run('jshint:simple-oop');
    }
};